#!/usr/bin/env sh
# vim: set ts=2 sw=2 tw=0 expandtab :
# SPDX-License-Identifier: MIT-0

# Copyright (c) 2022 Jeffrey H. Johnson <trnsz@pobox.com>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

set -eu

GAPI_VERSION="1.02"
GAPI_TRIES=4
GAPI_DELAY=2
GAPI_TMOUT=10

test -t 0 ||
  {
    printf '[FAIL] %s\n' "Not a tty!" >&2
    exit 1
  }

test -z "${GITLAB_PRIVATE_TOKEN:-}" &&
  {
    printf '[FAIL] %s\n' "GITLAB_PRIVATE_TOKEN is not set!" >&2
    exit 1
  }

test -z "${GITLAB_SERVER:-}" &&
  GITLAB_SERVER='https://gitlab.com/api/v4'

test -z "${GITLAB_PROJECT:-}" &&
  {
    GITLAB_PROJECT='dps8m%2Fdps8m'
    printf '[WARN] %s\n' \
      "Using default GITLAB_PROJECT of (${GITLAB_PROJECT:?})" |
        sed 's/%2F/\//' >&2
  }

usage ()
{
  printf '[INFO] %s\n' "${0:-gapi} ${GAPI_VERSION:?}"                          >&2
  printf '[INFO] %s\n' ""                                                      >&2
  printf '[INFO] %s\n' "Usage:"                                                >&2
  printf '[INFO] %s\n' "          ${0:-gapi} <request> <target>"               >&2
  printf '[INFO] %s\n' ""                                                      >&2
  printf '[INFO] %s\n' "Examples:"                                             >&2
  printf '[INFO] %s\n' "          ${0:-gapi} delete pipelines/602248227"       >&2
  printf '[INFO] %s\n' "          ${0:-gapi} get issues/156"                   >&2
  printf '[INFO] %s\n' ""                                                      >&2
  printf '[INFO] %s\n' "See https://docs.gitlab.com/ee/api/api_resources.html" >&2
  printf '[INFO] %s\n' "for more complete documentation of GitLab's REST API." >&2
  exit 1
}

# Convert request to uppercase
parseArgs ()
{
  GITLAB_REQUEST="$( printf "%s" "${1:?}" |
    tr "[:lower:]" "[:upper:]" )" &&
      shift
}

# Send request with ${CURL:-curl}
sendAPI ()
{
  "${CURL:-curl}" -s -m "${GAPI_TMOUT:?}"               \
    --header "PRIVATE-TOKEN: ${GITLAB_PRIVATE_TOKEN:?}" \
    --request "${GITLAB_REQUEST:?}"                     \
    "${GITLAB_SERVER:?}"/projects/"${GITLAB_PROJECT:?}"/"${1:?}"
}

retryIt ()
{
  COUNT=0
  TRIES="${1:?}" &&
    shift
  while [ "${COUNT:?}" -lt "${TRIES:?}" ]; do
    test ${COUNT:?} -ne 0 ||
      printf '%s' "[INFO] " >&2
    test ${COUNT:?} -ne 0 &&
      sleep "${GAPI_DELAY:?}"
    # shellcheck disable=SC2068
    OP=$(${@})
    printf '%s ' 'Result:' >&2
    printf '%s\n' "${OP:-}"
    printf '%s' "${OP:-}" |
      grep -q '":"[4-5][0-9][0-9] ' ||
        {
          printf '%s\n' "SUCCESS" >&2
          return 0
        }
    test "$(( ${COUNT:?} + 1 ))" -le "$(( ${TRIES:?} - 1 ))" &&
      printf '%s: ' \
        "[WARN] Retry $(( ${COUNT:?} + 1 )) of $(( ${TRIES:?} - 1 ))" >&2
    COUNT="$(( COUNT+1 ))"
  done
  printf '[FAIL] %s\n' "Request failed!" >&2
  return 1
}

test -z "${1:-}" &&
  usage

parseArgs "${1:?}" &&
  shift

test -z "${1:-}" &&
  usage

printf '%s\n' "[INFO] Request: ${GITLAB_REQUEST:?} ${1:?}" >&2
retryIt "${GAPI_TRIES:?}" sendAPI "${@}"
